{"version":3,"sources":["../../src/rules/validTypes.js"],"names":["asExpression","jsdoc","report","utils","context","allowEmptyNamepaths","checkSeesForNamepaths","options","tags","forEach","tag","validNamepathParsing","namepath","tagName","handled","includes","endChar","slice","startChar","charAt","validTypeParsing","type","hasTypePosition","tagMightHaveTypePosition","Boolean","mustHaveTypePosition","tagMustHaveTypePosition","hasNameOrNamepathPosition","tagMightHaveNamePosition","name","mustHaveNameOrNamepathPosition","tagMustHaveNamePosition","hasEither","tagMightHaveEitherTypeOrNamePosition","mustHaveEither","tagMustHaveEitherTypeOrNamePosition","thisNamepath","description","replace","test","thatNamepath","iterateAllJsdocs","meta","docs","schema","additionalProperies","properties","default"],"mappings":"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","sourcesContent":["import {parse} from 'jsdoctypeparser';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst asExpression = /as\\s+/u;\n\nexport default iterateJsdoc(({\n  jsdoc,\n  report,\n  utils,\n  context,\n}) => {\n  const {\n    allowEmptyNamepaths = true,\n    checkSeesForNamepaths = false,\n  } = context.options[0] || {};\n\n  if (!jsdoc.tags) {\n    return;\n  }\n  jsdoc.tags.forEach((tag) => {\n    const validNamepathParsing = function (namepath, tagName) {\n      try {\n        parse(namepath);\n      } catch {\n        let handled = false;\n\n        if (tagName) {\n          if (['memberof', 'memberof!'].includes(tagName)) {\n            const endChar = namepath.slice(-1);\n            if (['#', '.', '~'].includes(endChar)) {\n              try {\n                parse(namepath.slice(0, -1));\n                handled = true;\n              } catch {\n                // Use the original error for including the whole type\n              }\n            }\n          } else if (tagName === 'borrows') {\n            const startChar = namepath.charAt();\n            if (['#', '.', '~'].includes(startChar)) {\n              try {\n                parse(namepath.slice(1));\n                handled = true;\n              } catch {\n                // Use the original error for including the whole type\n              }\n            }\n          }\n        }\n\n        if (!handled) {\n          report(`Syntax error in namepath: ${namepath}`, null, tag);\n\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    const validTypeParsing = function (type) {\n      try {\n        parse(type);\n      } catch {\n        report(`Syntax error in type: ${type}`, null, tag);\n\n        return false;\n      }\n\n      return true;\n    };\n\n    const hasTypePosition = utils.tagMightHaveTypePosition(tag.tag) && Boolean(tag.type);\n    const mustHaveTypePosition = utils.tagMustHaveTypePosition(tag.tag);\n\n    const hasNameOrNamepathPosition = utils.tagMightHaveNamePosition(tag.tag) && Boolean(tag.name) && !(tag.tag === 'see' && !checkSeesForNamepaths);\n    const mustHaveNameOrNamepathPosition = utils.tagMustHaveNamePosition(tag.tag) && !allowEmptyNamepaths;\n\n    const hasEither = utils.tagMightHaveEitherTypeOrNamePosition(tag.tag) && (hasTypePosition || hasNameOrNamepathPosition);\n    const mustHaveEither = utils.tagMustHaveEitherTypeOrNamePosition(tag.tag);\n\n    if (tag.tag === 'borrows') {\n      const thisNamepath = tag.description.replace(asExpression, '');\n\n      if (!asExpression.test(tag.description) || !thisNamepath) {\n        report(`@borrows must have an \"as\" expression. Found \"${tag.description}\"`, null, tag);\n\n        return;\n      }\n\n      if (validNamepathParsing(thisNamepath, 'borrows')) {\n        const thatNamepath = tag.name;\n\n        validNamepathParsing(thatNamepath);\n      }\n    } else {\n      if (mustHaveEither && !hasEither && !mustHaveTypePosition) {\n        report(`Tag @${tag.tag} must have either a type or namepath`, null, tag);\n\n        return;\n      }\n\n      if (hasTypePosition) {\n        validTypeParsing(tag.type);\n      } else if (mustHaveTypePosition) {\n        report(`Tag @${tag.tag} must have a type`, null, tag);\n      }\n\n      if (hasNameOrNamepathPosition) {\n        validNamepathParsing(tag.name, tag.tag);\n      } else if (mustHaveNameOrNamepathPosition) {\n        report(`Tag @${tag.tag} must have a name/namepath`, null, tag);\n      }\n    }\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Requires all types to be valid JSDoc or Closure compiler types without syntax errors.',\n    },\n    schema: [\n      {\n        additionalProperies: false,\n        properties: {\n          allowEmptyNamepaths: {\n            default: true,\n            type: 'boolean',\n          },\n          checkSeesForNamepaths: {\n            default: false,\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"validTypes.js"}